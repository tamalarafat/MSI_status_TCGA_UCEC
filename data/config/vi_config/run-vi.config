cleanup = false

profiles {
    hilbert {
        params {
            config_profile_description = 'HILBERT'
            // HPC job resources
            max_memory = 200.GB
            max_cpus = 32
            max_time = 72.h
        }
        process {
            // using ZPM project code.
            executor = 'pbspro'
        }
    }
    local {
        params {
            config_profile_description = 'local lenovo computer'
            // Local lenovo resources
            max_memory = 40.GB
            max_cpus = 6
            max_time = 72.h
        }
        process {
            executor = 'local'
        }
    }
    singlenode {
        process {
            executor = 'local'
        }
        params {
            config_profile_description = 'single node'
            // Here use single node resources
            max_memory = 100.GB
            max_cpus = 8
            max_time = 24.h
        }
    }
}

process {
  // already present block; just extend it
  withName: ENSEMBLVEP_VEP {
    publishDir = [
      path: { "${params.outdir}/vcfs/ensemblvep" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    // make the shared cache visible at the path VEP expects
    beforeScript = """
      ln -sfn ${params.vep_cache} 110_GRCh38
    """
    ext.args = { [
      '--format vcf --offline --buffer_size 500',
      (params.vep_cache_source)       ? "--${params.vep_cache_source}": '',
      (params.check_existing)         ? '--check_existing'            : '',
      (params.everything)             ? '--everything'                : '',
      (params.no_escape)              ? '--no_escape'                 : '',
      (params.flag_pick)              ? '--flag_pick'                 : '',
      (params.flag_pick_allele)       ? '--flag_pick_allele'          : '',
      (params.flag_pick_allele_gene)  ? '--flag_pick_allele_gene'     : '',
      (params.terms)                  ? "--terms ${params.terms}"     : '',
      (params.clin_sig_allele)        ? '--clin_sig_allele 1'         : '--clin_sig_allele 0',
      (params.exclude_null_alleles)   ? '--exclude_null_alleles'      : '',
      (params.no_check_alleles)       ? '--no_check_alleles'          : '',
      (params.var_synonyms)           ? '--var_synonyms'              : '',
      (params.vep_out_format)         ? "--${params.vep_out_format}"  : '--vcf',
      // ensure version/assembly/species consistent
      "--dir_cache ${params.vep_cache}",
      "--cache_version ${params.vep_cache_version}",
      "--species ${params.vep_species}",
      "--assembly ${params.vep_genome}",
      "--${params.vep_cache_source}"   // i.e. --refseq
    ].join(' ').trim() }
  }
}

